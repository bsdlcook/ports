#!/bin/sh

print_ports=false
while getopts ":p" opts; do
	case "${opts}" in
		p) print_ports=true ;;
	esac
done

echo_msg() {
	if [ "${print_ports}" = false ]; then
		echo -e "$*"
	fi
}

readonly REPOLOGY_BASE="https://repology.org"
readonly REPOLOGY_API_VERSION=1
readonly REPOLOGY_API="${REPOLOGY_BASE}/api/v${REPOLOGY_API_VERSION}"
readonly REPOLOGY_PROJECT="${REPOLOGY_API}/project"

get_local_version() {
	grep -E "^(DIST)?VERSION=.*$" "$1/Makefile" | awk '{print $2}'
}

get_remote_version() {
	name="$1"

	case "${name}" in
		ansible-sysrc) name=python:ansible-sysrc ;;
		gh) name=github-cli ;;
		py-jc) name=python:jc ;;
		py-tuir) name=python:tuir ;;
		tut) name=tut-mastodon-client ;;
	esac

	fetch -qo - "${REPOLOGY_PROJECT}/${name}" | jq -r '.[] | select(.repo == "freebsd") | .version'
}

PORTS=
COUNTER=0
UPTODATE=0
AHEAD=0
OUTDATED=0

echo_msg "===> Checking local git port version(s) with repology"
for port in $(find . -type d -depth 2 -not -path "./.git/*" | cut -d/ -f 2,3 | sort); do
	name=$(echo "${port}" | cut -d/ -f 2)
	local_version=$(get_local_version "${port}")
	remote_version=$(get_remote_version "${name}")

	check=$(pkg version -t "${local_version}" "${remote_version}")
	case "${check}" in
		"=")
			echo_msg "=>> \e[32m${port} is up-to-date\e[0m"
			UPTODATE=$((UPTODATE + 1))
			;;
		"<")
			echo_msg "=>> \e[33m${port} ${local_version} is outdated by ${remote_version}\e[0m"
			OUTDATED=$((OUTDATED + 1))
			PORTS="${PORTS} ${port}"
			;;
		">")
			echo_msg "=>> \e[36m${port} ${local_version} is ahead of ${remote_version}\e[0m"
			AHEAD=$((AHEAD + 1))
			;;
	esac

	COUNTER=$((COUNTER + 1))
done
echo_msg "===> Finished checking ${COUNTER} port version(s), OK: ${UPTODATE}, AHEAD: ${AHEAD}, OUTDATED: ${OUTDATED}"

if [ "${print_ports}" = true ]; then
	echo "${PORTS}"
fi
